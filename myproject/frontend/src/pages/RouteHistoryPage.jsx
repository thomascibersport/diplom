import React, { useEffect, useState } from "react";
import Header from "../components/Header";
import { getDetailedAddress } from "../utils/geocoding";

function getCookie(name) {
  let cookieValue = null;
  if (document.cookie && document.cookie !== "") {
    const cookies = document.cookie.split(";");
    for (let i = 0; i < cookies.length; i++) {
      const cookie = cookies[i].trim();
      if (cookie.substring(0, name.length + 1) === name + "=") {
        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
        break;
      }
    }
  }
  return cookieValue;
}

function RouteHistoryPage() {
  const [routeHistory, setRouteHistory] = useState([]);
  const [locations, setLocations] = useState({});
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –∏–∑ API
  useEffect(() => {
    const fetchRouteHistory = async () => {
      try {
        const token = getCookie("token");
        const response = await fetch(
          "http://localhost:8000/api/route-records/",
          {
            headers: {
              Authorization: `Bearer ${token}`,
              "Content-Type": "application/json",
            },
          }
        );

        const responseText = await response.text();
        if (!response.ok) {
          throw new Error(
            `HTTP error! status: ${response.status}. Response: ${responseText}`
          );
        }
        const data = JSON.parse(responseText);
        setRouteHistory(data);
        setError(null);
      } catch (err) {
        console.error("Fetch error:", err);
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchRouteHistory();
  }, []);

  // –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
  useEffect(() => {
    async function fetchLocations() {
      const locs = { ...locations };

      for (const route of routeHistory) {
        // –î–ª—è start_location (–ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ –µ—Å—Ç—å)
        if (route.start_location && !locs[route.start_location]) {
          locs[route.start_location] = route.start_location; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å
        }

        // –î–ª—è end_location (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ)
        if (route.end_location && !locs[route.end_location]) {
          locs[route.end_location] = route.end_location;
        }
      }

      setLocations(locs);
    }

    if (routeHistory.length > 0) {
      fetchLocations();
    }
  }, [routeHistory]);

  return (
    <div className="min-h-screen bg-gray-100 dark:bg-gray-900">
      <Header />
      <div className="container mx-auto p-4">
        <h1 className="text-2xl font-semibold text-center text-gray-800 dark:text-gray-200 mb-6">
          –ò—Å—Ç–æ—Ä–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
        </h1>
        {error && <p className="text-center text-red-600">–û—à–∏–±–∫–∞: {error}</p>}
        {loading ? (
          <p className="text-center text-gray-600 dark:text-gray-400">
            –ó–∞–≥—Ä—É–∑–∫–∞...
          </p>
        ) : routeHistory.length === 0 ? (
          <p className="text-center text-gray-600 dark:text-gray-400">
            –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤.
          </p>
        ) : (
          <ul className="space-y-4">
            {routeHistory.map((route, index) => (
              <li key={index} className="p-4 border rounded-lg bg-white dark:bg-gray-800 shadow flex flex-col">
                <p className="font-semibold text-lg">–ú–∞—Ä—à—Ä—É—Ç {index + 1}</p>
                <p className="text-gray-700 dark:text-gray-300">
                  üïí{" "}
                  <strong>
                    {new Date(route.start_time).toLocaleString()} ‚Äî{" "}
                    {new Date(route.end_time).toLocaleString()}
                  </strong>
                </p>
                <p className="text-gray-700 dark:text-gray-300">
                  üìç <strong>–û—Ç–∫—É–¥–∞:</strong> {route.start_location} ‚û°Ô∏è{" "}
                  <strong>–ö—É–¥–∞:</strong> {route.end_location}
                </p>
                <p className="text-gray-700 dark:text-gray-300">
                  üöó <strong>–í—Ä–µ–º—è –≤ –ø—É—Ç–∏:</strong> {route.trip_duration} | üõ£Ô∏è{" "}
                  <strong>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</strong> {route.route_distance}
                </p>
                <p>–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {route.average_speed} –∫–º/—á</p>
                {route.weather_description && (
                  <p className="text-gray-700 dark:text-gray-300">
                    ‚õÖ <strong>–ü–æ–≥–æ–¥–∞:</strong> {route.weather_description} | üå°Ô∏è{" "}
                    <strong>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</strong> {route.weather_temperature}¬∞C
                  </p>
                )}
              </li>
            ))}
          </ul>
        )}
      </div>
    </div>
  );
}

export default RouteHistoryPage;
